# docker-compose.yml - Configuración de Docker Compose
version: '3.8'

services:
  # Servidor principal
  social-video-generator:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: social-video-generator
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - PUBLIC_URL=http://localhost:3000
      - UPLOAD_MAX_SIZE=100
      - MAX_OUTPUT_FILES=1000
      - CLEANUP_TEMP_FILES=true
      - LOG_LEVEL=info
    volumes:
      # Persistir datos importantes
      - ./videos:/app/videos:ro  # Videos de fondo (solo lectura)
      - ./fonts:/app/fonts:ro   # Fuentes (solo lectura)
      - video_output:/app/output      # Videos generados
      - video_uploads:/app/uploads    # Archivos subidos
      - video_logs:/app/logs         # Logs
      - video_temp:/app/temp         # Archivos temporales
    networks:
      - video_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Nginx como reverse proxy (opcional para producción)
  nginx:
    image: nginx:alpine
    container_name: social-video-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # Certificados SSL
      - video_output:/var/www/output:ro  # Servir archivos estáticos
    depends_on:
      - social-video-generator
    networks:
      - video_network
    restart: unless-stopped
    profiles:
      - production

  # Redis para caché (opcional)
  redis:
    image: redis:7-alpine
    container_name: social-video-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - video_network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    profiles:
      - cache

  # PostgreSQL para analytics (opcional)
  postgres:
    image: postgres:15-alpine
    container_name: social-video-postgres
    environment:
      - POSTGRES_DB=social_video_generator
      - POSTGRES_USER=video_user
      - POSTGRES_PASSWORD=secure_password_here
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - video_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U video_user -d social_video_generator"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - database

  # Prometheus para monitoreo (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: social-video-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - video_network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # Grafana para visualización (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: social-video-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - video_network
    restart: unless-stopped
    depends_on:
      - prometheus
    profiles:
      - monitoring

# Configuración para desarrollo
  social-video-generator-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: social-video-generator-dev
    ports:
      - "3000:3000"
      - "9229:9229"  # Puerto de debug
    environment:
      - NODE_ENV=development
      - PORT=3000
      - PUBLIC_URL=http://localhost:3000
      - LOG_LEVEL=debug
    volumes:
      # Montar código fuente para hot reload
      - .:/app
      - /app/node_modules
      - /app/dist
    networks:
      - video_network
    profiles:
      - development
    command: npm run dev

# Volúmenes persistentes
volumes:
  video_output:
    driver: local
  video_uploads:
    driver: local
  video_logs:
    driver: local
  video_temp:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Red personalizada
networks:
  video_network:
    driver: bridge